{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","good","neutral","bad","className","styles","list","item","button","type","name","data-value","onClick","Statistics","total","positivePercentage","statisticsBox","Section","title","children","Notification","message","App","state","handleFeedback","event","currentTarget","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,KAAO,8BAA8B,MAAQ,+BAA+B,OAAS,gCAAgC,KAAO,gC,qBCA9ID,EAAOC,QAAU,CAAC,cAAgB,oC,gBCAlCD,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,QAAU,gC,qKCoCbC,EAhCS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC1BC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,QAASC,EAAQJ,EAARI,IACvB,OACE,qBAAIC,UAAWC,IAAOC,KAAtB,UACE,oBAAIF,UAAWC,IAAOE,KAAtB,SACE,wBAAQH,UAAWC,IAAOG,OAAQC,KAAK,SAASC,KAAK,OAAOC,aAAYV,EAAMW,QAASZ,EAAvF,oBAIF,oBAAII,UAAWC,IAAOE,KAAtB,SACE,wBAAQH,UAAWC,IAAOG,OAAQC,KAAK,SAASC,KAAK,UAAUC,aAAYT,EAASU,QAASZ,EAA7F,uBAIF,oBAAII,UAAWC,IAAOE,KAAtB,SACE,wBAAQH,UAAWC,IAAOG,OAAQC,KAAK,SAASC,KAAK,MAAMC,aAAYR,EAAKS,QAASZ,EAArF,uB,gBCSOa,EAxBI,SAAC,GAAuD,IAArDZ,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKW,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qBAAIX,UAAWC,IAAOW,cAAtB,UACE,wCAAWf,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYW,KACZ,qDAAwBC,EAAxB,W,gBCKSE,EAZC,SAAC,GAAD,QAAGC,aAAH,MAAW,GAAX,EAAeC,EAAf,EAAeA,SAAf,OACd,qCACE,oBAAIf,UAAWC,IAAOa,MAAtB,SAA8BA,IAC7BC,M,iBCGUC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGjB,UAAWC,IAAOgB,QAArB,SAA+BA,KC8DtDC,E,4MA3DbC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAmBPqB,eAAiB,SAACC,GAAW,IACnBf,EAASe,EAAMC,cAAfhB,KACR,EAAKiB,UAAS,SAACC,GAAD,sBAAmBlB,EAAOkB,EAAUlB,GAAQ,O,EAG5DmB,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBtB,KADiB,EACXC,QADW,EACFC,K,EAIzB2B,gCAAkC,WAEhC,OADiB,EAAKP,MAAdtB,KACO,EAAK4B,qBAAwB,K,4CAG9C,WAAU,IAAD,EACwBE,KAAKR,MAA5BtB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBW,EAAQiB,KAAKF,qBACbd,EAAqBgB,KAAKD,kCAEhC,OACE,qCACE,cAAC,EAAD,CAASZ,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBnB,QAASgC,KAAKR,MAAOvB,gBAAiB+B,KAAKP,mBAE7DV,EAAQ,EACP,cAAC,EAAD,CAAcO,QAAQ,sBAEtB,cAAC,EAAD,CAASH,MAAM,aAAf,SACE,cAAC,EAAD,CAAYjB,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKW,MAAOA,EAAOC,mBAAoBA,a,GApDhFiB,IAAMC,WCFxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.52611803.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__gsfuV\",\"title\":\"FeedbackOptions_title__38qp-\",\"button\":\"FeedbackOptions_button__2XK23\",\"item\":\"FeedbackOptions_item__2bnxB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsBox\":\"Statistics_statisticsBox__1zNZ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__1GiE-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__2GN8o\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./FeedbackOptions.module.css\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  const { good, neutral, bad } = options;\r\n  return (\r\n    <ul className={styles.list}>\r\n      <li className={styles.item}>\r\n        <button className={styles.button} type=\"button\" name=\"good\" data-value={good} onClick={onLeaveFeedback}>\r\n          Good\r\n        </button>\r\n      </li>\r\n      <li className={styles.item}>\r\n        <button className={styles.button} type=\"button\" name=\"neutral\" data-value={neutral} onClick={onLeaveFeedback}>\r\n          Neutral\r\n        </button>\r\n      </li>\r\n      <li className={styles.item}>\r\n        <button className={styles.button} type=\"button\" name=\"bad\" data-value={bad} onClick={onLeaveFeedback}>\r\n          Bad\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n\r\n// Вынеси блок кнопок в компонент <FeedbackOptions options={} onLeaveFeedback={}>.\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul className={styles.statisticsBox}>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n  state: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      good: PropTypes.number.isRequired,\r\n      neutral: PropTypes.number.isRequired,\r\n      bad: PropTypes.number.isRequired,\r\n    }).isRequired\r\n  ),\r\n};\r\n\r\nexport default Statistics;\r\n\r\n// Шаг 3\r\n// Вынеси отображение статистики в отдельный компонент <Statistics good={} neutral={} bad={} total={} positivePercentage={}>.\r\n// Вынеси блок кнопок в компонент <FeedbackOptions options={} onLeaveFeedback={}>.\r\n// Создай компонент <Section title=\"\">, который рендерит секцию с заголовком и детей (children). Оберни каждый из <Statistics> и <FeedbackOptions> в созданный компонент секции.\r\n// Шаг 4\r\n// Расширь функционал приложения так, чтобы блок статистики рендерился только после того, как был собран хотя бы один отзыв.\r\n//  Сообщение об отсутствиии статистики вынеси в компонент <Notification message=\"No feedback given\">.\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./Section.module.css\";\r\n\r\nconst Section = ({ title = \"\", children }) => (\r\n  <>\r\n    <h2 className={styles.title}>{title}</h2>\r\n    {children}\r\n  </>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n\r\n// Создай компонент <Section title=\"\">, который рендерит секцию с заголовком и детей (children).\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./Notification.module.css\";\r\n\r\nconst Notification = ({ message }) => <p className={styles.message}>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\n\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Section from \"./components/Section\";\nimport Notification from \"./components/Notification\";\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  // handleGood = () => {\n  //   this.setState((prevState) => ({\n  //     good: prevState.good + 1,\n  //   }));\n  // };\n  // handleNeutral = () => {\n  //   this.setState((prevState) => ({\n  //     neutral: prevState.neutral + 1,\n  //   }));\n  // };\n  // handleBad = () => {\n  //   this.setState((prevState) => ({\n  //     bad: prevState.bad + 1,\n  //   }));\n  // };\n\n  handleFeedback = (event) => {\n    const { name } = event.currentTarget;\n    this.setState((prevState) => ({ [name]: prevState[name] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return (good / this.countTotalFeedback()) * 100;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={this.state} onLeaveFeedback={this.handleFeedback} />\n        </Section>\n        {total < 1 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Section title=\"Statistics\">\n            <Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercentage={positivePercentage} />\n          </Section>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// Шаг 3\n// Вынеси отображение статистики в отдельный компонент <Statistics good={} neutral={} bad={} total={} positivePercentage={}>.\n// Вынеси блок кнопок в компонент <FeedbackOptions options={} onLeaveFeedback={}>.\n// Создай компонент <Section title=\"\">, который рендерит секцию с заголовком и детей (children). Оберни каждый из <Statistics> и <FeedbackOptions> в созданный компонент секции.\n// Шаг 4\n// Расширь функционал приложения так, чтобы блок статистики рендерился только после того, как был собран хотя бы один отзыв.\n//  Сообщение об отсутствиии статистики вынеси в компонент <Notification message=\"No feedback given\">.\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}